"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AgmInfoWindow = void 0;

var _core = require("@angular/core");

var _infoWindowManager2 = require("../services/managers/info-window-manager");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var infoWindowId = 0;
/**
 * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.
 *
 * ### Example
 * ```typescript
 * import { Component } from '@angular/core';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  styles: [`
 *    .agm-map-container {
 *      height: 300px;
 *    }
 * `],
 *  template: `
 *    <agm-map [latitude]="lat" [longitude]="lng" [zoom]="zoom">
 *      <agm-marker [latitude]="lat" [longitude]="lng" [label]="'M'">
 *        <agm-info-window [disableAutoPan]="true">
 *          Hi, this is the content of the <strong>info window</strong>
 *        </agm-info-window>
 *      </agm-marker>
 *    </agm-map>
 *  `
 * })
 * ```
 */

var AgmInfoWindow =
/** @class */
function () {
  function AgmInfoWindow(_infoWindowManager, _el) {
    this._infoWindowManager = _infoWindowManager;
    this._el = _el;
    /**
     * Sets the open state for the InfoWindow. You can also call the open() and close() methods.
     */

    this.isOpen = false;
    /**
     * Emits an event when the info window is closed.
     */

    this.infoWindowClose = new _core.EventEmitter();
    this._infoWindowAddedToManager = false;
    this._id = (infoWindowId++).toString();
  }

  AgmInfoWindow_1 = AgmInfoWindow;

  AgmInfoWindow.prototype.ngOnInit = function () {
    this.content = this._el.nativeElement.querySelector('.agm-info-window-content');

    this._infoWindowManager.addInfoWindow(this);

    this._infoWindowAddedToManager = true;

    this._updateOpenState();

    this._registerEventListeners();
  };
  /** @internal */


  AgmInfoWindow.prototype.ngOnChanges = function (changes) {
    if (!this._infoWindowAddedToManager) {
      return;
    }

    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' && typeof this.longitude === 'number') {
      this._infoWindowManager.setPosition(this);
    }

    if (changes['zIndex']) {
      this._infoWindowManager.setZIndex(this);
    }

    if (changes['isOpen']) {
      this._updateOpenState();
    }

    this._setInfoWindowOptions(changes);
  };

  AgmInfoWindow.prototype._registerEventListeners = function () {
    var _this = this;

    this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {
      _this.isOpen = false;

      _this.infoWindowClose.emit();
    });
  };

  AgmInfoWindow.prototype._updateOpenState = function () {
    this.isOpen ? this.open() : this.close();
  };

  AgmInfoWindow.prototype._setInfoWindowOptions = function (changes) {
    var options = {};
    var optionKeys = Object.keys(changes).filter(function (k) {
      return AgmInfoWindow_1._infoWindowOptionsInputs.indexOf(k) !== -1;
    });
    optionKeys.forEach(function (k) {
      options[k] = changes[k].currentValue;
    });

    this._infoWindowManager.setOptions(this, options);
  };
  /**
   * Opens the info window.
   */


  AgmInfoWindow.prototype.open = function () {
    return this._infoWindowManager.open(this);
  };
  /**
   * Closes the info window.
   */


  AgmInfoWindow.prototype.close = function () {
    var _this = this;

    return this._infoWindowManager.close(this).then(function () {
      _this.infoWindowClose.emit();
    });
  };
  /** @internal */


  AgmInfoWindow.prototype.id = function () {
    return this._id;
  };
  /** @internal */


  AgmInfoWindow.prototype.toString = function () {
    return 'AgmInfoWindow-' + this._id.toString();
  };
  /** @internal */


  AgmInfoWindow.prototype.ngOnDestroy = function () {
    this._infoWindowManager.deleteInfoWindow(this);
  };

  var AgmInfoWindow_1;
  AgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];

  __decorate([(0, _core.Input)(), __metadata("design:type", Number)], AgmInfoWindow.prototype, "latitude", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Number)], AgmInfoWindow.prototype, "longitude", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Boolean)], AgmInfoWindow.prototype, "disableAutoPan", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Number)], AgmInfoWindow.prototype, "zIndex", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Number)], AgmInfoWindow.prototype, "maxWidth", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Boolean)], AgmInfoWindow.prototype, "isOpen", void 0);

  __decorate([(0, _core.Output)(), __metadata("design:type", _core.EventEmitter)], AgmInfoWindow.prototype, "infoWindowClose", void 0);

  AgmInfoWindow = AgmInfoWindow_1 = __decorate([(0, _core.Component)({
    selector: 'agm-info-window',
    template: "<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  "
  }), __metadata("design:paramtypes", [_infoWindowManager2.InfoWindowManager, _core.ElementRef])], AgmInfoWindow);
  return AgmInfoWindow;
}();

exports.AgmInfoWindow = AgmInfoWindow;