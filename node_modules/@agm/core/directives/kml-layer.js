"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AgmKmlLayer = void 0;

var _core = require("@angular/core");

var _kmlLayerManager = require("./../services/managers/kml-layer-manager");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var layerId = 0;

var AgmKmlLayer =
/** @class */
function () {
  function AgmKmlLayer(_manager) {
    this._manager = _manager;
    this._addedToManager = false;
    this._id = (layerId++).toString();
    this._subscriptions = [];
    /**
     * If true, the layer receives mouse events. Default value is true.
     */

    this.clickable = true;
    /**
     * By default, the input map is centered and zoomed to the bounding box of the contents of the
     * layer.
     * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom
     * were never set.
     */

    this.preserveViewport = false;
    /**
     * Whether to render the screen overlays. Default true.
     */

    this.screenOverlays = true;
    /**
     * Suppress the rendering of info windows when layer features are clicked.
     */

    this.suppressInfoWindows = false;
    /**
     * The URL of the KML document to display.
     */

    this.url = null;
    /**
     * The z-index of the layer.
     */

    this.zIndex = null;
    /**
     * This event is fired when a feature in the layer is clicked.
     */

    this.layerClick = new _core.EventEmitter();
    /**
     * This event is fired when the KML layers default viewport has changed.
     */

    this.defaultViewportChange = new _core.EventEmitter();
    /**
     * This event is fired when the KML layer has finished loading.
     * At this point it is safe to read the status property to determine if the layer loaded
     * successfully.
     */

    this.statusChange = new _core.EventEmitter();
  }

  AgmKmlLayer_1 = AgmKmlLayer;

  AgmKmlLayer.prototype.ngOnInit = function () {
    if (this._addedToManager) {
      return;
    }

    this._manager.addKmlLayer(this);

    this._addedToManager = true;

    this._addEventListeners();
  };

  AgmKmlLayer.prototype.ngOnChanges = function (changes) {
    if (!this._addedToManager) {
      return;
    }

    this._updatePolygonOptions(changes);
  };

  AgmKmlLayer.prototype._updatePolygonOptions = function (changes) {
    var options = Object.keys(changes).filter(function (k) {
      return AgmKmlLayer_1._kmlLayerOptions.indexOf(k) !== -1;
    }).reduce(function (obj, k) {
      obj[k] = changes[k].currentValue;
      return obj;
    }, {});

    if (Object.keys(options).length > 0) {
      this._manager.setOptions(this, options);
    }
  };

  AgmKmlLayer.prototype._addEventListeners = function () {
    var _this = this;

    var listeners = [{
      name: 'click',
      handler: function handler(ev) {
        return _this.layerClick.emit(ev);
      }
    }, {
      name: 'defaultviewport_changed',
      handler: function handler() {
        return _this.defaultViewportChange.emit();
      }
    }, {
      name: 'status_changed',
      handler: function handler() {
        return _this.statusChange.emit();
      }
    }];
    listeners.forEach(function (obj) {
      var os = _this._manager.createEventObservable(obj.name, _this).subscribe(obj.handler);

      _this._subscriptions.push(os);
    });
  };
  /** @internal */


  AgmKmlLayer.prototype.id = function () {
    return this._id;
  };
  /** @internal */


  AgmKmlLayer.prototype.toString = function () {
    return "AgmKmlLayer-" + this._id.toString();
  };
  /** @internal */


  AgmKmlLayer.prototype.ngOnDestroy = function () {
    this._manager.deleteKmlLayer(this); // unsubscribe all registered observable subscriptions


    this._subscriptions.forEach(function (s) {
      return s.unsubscribe();
    });
  };

  var AgmKmlLayer_1;
  AgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];

  __decorate([(0, _core.Input)(), __metadata("design:type", Boolean)], AgmKmlLayer.prototype, "clickable", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Boolean)], AgmKmlLayer.prototype, "preserveViewport", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Boolean)], AgmKmlLayer.prototype, "screenOverlays", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Boolean)], AgmKmlLayer.prototype, "suppressInfoWindows", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", String)], AgmKmlLayer.prototype, "url", void 0);

  __decorate([(0, _core.Input)(), __metadata("design:type", Number)], AgmKmlLayer.prototype, "zIndex", void 0);

  __decorate([(0, _core.Output)(), __metadata("design:type", _core.EventEmitter)], AgmKmlLayer.prototype, "layerClick", void 0);

  __decorate([(0, _core.Output)(), __metadata("design:type", _core.EventEmitter)], AgmKmlLayer.prototype, "defaultViewportChange", void 0);

  __decorate([(0, _core.Output)(), __metadata("design:type", _core.EventEmitter)], AgmKmlLayer.prototype, "statusChange", void 0);

  AgmKmlLayer = AgmKmlLayer_1 = __decorate([(0, _core.Directive)({
    selector: 'agm-kml-layer'
  }), __metadata("design:paramtypes", [_kmlLayerManager.KmlLayerManager])], AgmKmlLayer);
  return AgmKmlLayer;
}();

exports.AgmKmlLayer = AgmKmlLayer;