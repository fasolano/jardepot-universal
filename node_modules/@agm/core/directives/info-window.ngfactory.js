"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View_AgmInfoWindow_0 = View_AgmInfoWindow_0;
exports.View_AgmInfoWindow_Host_0 = View_AgmInfoWindow_Host_0;
exports.AgmInfoWindowNgFactory = exports.RenderType_AgmInfoWindow = void 0;

var i0 = _interopRequireWildcard(require("@angular/core"));

var i1 = _interopRequireWildcard(require("./info-window"));

var i2 = _interopRequireWildcard(require("../services/managers/info-window-manager"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 *
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */
var styles_AgmInfoWindow = [];
var RenderType_AgmInfoWindow = i0.ɵcrt({
  encapsulation: 2,
  styles: styles_AgmInfoWindow,
  data: {}
});
exports.RenderType_AgmInfoWindow = RenderType_AgmInfoWindow;

function View_AgmInfoWindow_0(_l) {
  return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "div", [["class", "agm-info-window-content"]], null, null, null, null, null)), i0.ɵncd(null, 0)], null, null);
}

function View_AgmInfoWindow_Host_0(_l) {
  return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, "agm-info-window", [], null, null, null, View_AgmInfoWindow_0, RenderType_AgmInfoWindow)), i0.ɵdid(1, 770048, null, 0, i1.AgmInfoWindow, [i2.InfoWindowManager, i0.ElementRef], null, null)], function (_ck, _v) {
    _ck(_v, 1, 0);
  }, null);
}

var AgmInfoWindowNgFactory = i0.ɵccf("agm-info-window", i1.AgmInfoWindow, View_AgmInfoWindow_Host_0, {
  latitude: "latitude",
  longitude: "longitude",
  disableAutoPan: "disableAutoPan",
  zIndex: "zIndex",
  maxWidth: "maxWidth",
  isOpen: "isOpen"
}, {
  infoWindowClose: "infoWindowClose"
}, ["*"]);
exports.AgmInfoWindowNgFactory = AgmInfoWindowNgFactory;