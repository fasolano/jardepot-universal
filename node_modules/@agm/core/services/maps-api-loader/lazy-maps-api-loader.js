"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LazyMapsAPILoader = exports.LAZY_MAPS_API_CONFIG = exports.GoogleMapsScriptProtocol = void 0;

var _core = require("@angular/core");

var _browserGlobals = require("../../utils/browser-globals");

var _mapsApiLoader = require("./maps-api-loader");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __extends = void 0 && (void 0).__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var GoogleMapsScriptProtocol;
exports.GoogleMapsScriptProtocol = GoogleMapsScriptProtocol;

(function (GoogleMapsScriptProtocol) {
  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTP"] = 1] = "HTTP";
  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTPS"] = 2] = "HTTPS";
  GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["AUTO"] = 3] = "AUTO";
})(GoogleMapsScriptProtocol || (exports.GoogleMapsScriptProtocol = GoogleMapsScriptProtocol = {}));
/**
 * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link
 * LazyMapsAPILoaderConfig}.
 */


var LAZY_MAPS_API_CONFIG = new _core.InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');
exports.LAZY_MAPS_API_CONFIG = LAZY_MAPS_API_CONFIG;

var LazyMapsAPILoader =
/** @class */
function (_super) {
  __extends(LazyMapsAPILoader, _super);

  function LazyMapsAPILoader(config, w, d) {
    if (config === void 0) {
      config = null;
    }

    var _this = _super.call(this) || this;

    _this._SCRIPT_ID = 'agmGoogleMapsApiScript';
    _this.callbackName = "agmLazyMapsAPILoader";
    _this._config = config || {};
    _this._windowRef = w;
    _this._documentRef = d;
    return _this;
  }

  LazyMapsAPILoader.prototype.load = function () {
    var window = this._windowRef.getNativeWindow();

    if (window.google && window.google.maps) {
      // Google maps already loaded on the page.
      return Promise.resolve();
    }

    if (this._scriptLoadingPromise) {
      return this._scriptLoadingPromise;
    } // this can happen in HMR situations or Stackblitz.io editors.


    var scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);

    if (scriptOnPage) {
      this._assignScriptLoadingPromise(scriptOnPage);

      return this._scriptLoadingPromise;
    }

    var script = this._documentRef.getNativeDocument().createElement('script');

    script.type = 'text/javascript';
    script.async = true;
    script.defer = true;
    script.id = this._SCRIPT_ID;
    script.src = this._getScriptSrc(this.callbackName);

    this._assignScriptLoadingPromise(script);

    this._documentRef.getNativeDocument().body.appendChild(script);

    return this._scriptLoadingPromise;
  };

  LazyMapsAPILoader.prototype._assignScriptLoadingPromise = function (scriptElem) {
    var _this = this;

    this._scriptLoadingPromise = new Promise(function (resolve, reject) {
      _this._windowRef.getNativeWindow()[_this.callbackName] = function () {
        resolve();
      };

      scriptElem.onerror = function (error) {
        reject(error);
      };
    });
  };

  LazyMapsAPILoader.prototype._getScriptSrc = function (callbackName) {
    var protocolType = this._config && this._config.protocol || GoogleMapsScriptProtocol.HTTPS;
    var protocol;

    switch (protocolType) {
      case GoogleMapsScriptProtocol.AUTO:
        protocol = '';
        break;

      case GoogleMapsScriptProtocol.HTTP:
        protocol = 'http:';
        break;

      case GoogleMapsScriptProtocol.HTTPS:
        protocol = 'https:';
        break;
    }

    var hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';
    var queryParams = {
      v: this._config.apiVersion || 'quarterly',
      callback: callbackName,
      key: this._config.apiKey,
      client: this._config.clientId,
      channel: this._config.channel,
      libraries: this._config.libraries,
      region: this._config.region,
      language: this._config.language
    };
    var params = Object.keys(queryParams).filter(function (k) {
      return queryParams[k] != null;
    }).filter(function (k) {
      // remove empty arrays
      return !Array.isArray(queryParams[k]) || Array.isArray(queryParams[k]) && queryParams[k].length > 0;
    }).map(function (k) {
      // join arrays as comma seperated strings
      var i = queryParams[k];

      if (Array.isArray(i)) {
        return {
          key: k,
          value: i.join(',')
        };
      }

      return {
        key: k,
        value: queryParams[k]
      };
    }).map(function (entry) {
      return entry.key + "=" + entry.value;
    }).join('&');
    return protocol + "//" + hostAndPath + "?" + params;
  };

  LazyMapsAPILoader = __decorate([(0, _core.Injectable)(), __param(0, (0, _core.Optional)()), __param(0, (0, _core.Inject)(LAZY_MAPS_API_CONFIG)), __metadata("design:paramtypes", [Object, _browserGlobals.WindowRef, _browserGlobals.DocumentRef])], LazyMapsAPILoader);
  return LazyMapsAPILoader;
}(_mapsApiLoader.MapsAPILoader);

exports.LazyMapsAPILoader = LazyMapsAPILoader;