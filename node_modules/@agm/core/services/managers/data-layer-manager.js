"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataLayerManager = void 0;

var _core = require("@angular/core");

var _rxjs = require("rxjs");

var _googleMapsApiWrapper = require("./../google-maps-api-wrapper");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

/**
 * Manages all Data Layers for a Google Map instance.
 */
var DataLayerManager =
/** @class */
function () {
  function DataLayerManager(_wrapper, _zone) {
    this._wrapper = _wrapper;
    this._zone = _zone;
    this._layers = new Map();
  }
  /**
   * Adds a new Data Layer to the map.
   */


  DataLayerManager.prototype.addDataLayer = function (layer) {
    var _this = this;

    var newLayer = this._wrapper.createDataLayer({
      style: layer.style
    }).then(function (d) {
      if (layer.geoJson) {
        _this.getDataFeatures(d, layer.geoJson).then(function (features) {
          return d.features = features;
        });
      }

      return d;
    });

    this._layers.set(layer, newLayer);
  };

  DataLayerManager.prototype.deleteDataLayer = function (layer) {
    var _this = this;

    this._layers.get(layer).then(function (l) {
      l.setMap(null);

      _this._layers.delete(layer);
    });
  };

  DataLayerManager.prototype.updateGeoJson = function (layer, geoJson) {
    var _this = this;

    this._layers.get(layer).then(function (l) {
      l.forEach(function (feature) {
        l.remove(feature);
        var index = l.features.indexOf(feature, 0);

        if (index > -1) {
          l.features.splice(index, 1);
        }
      });

      _this.getDataFeatures(l, geoJson).then(function (features) {
        return l.features = features;
      });
    });
  };

  DataLayerManager.prototype.setDataOptions = function (layer, options) {
    this._layers.get(layer).then(function (l) {
      l.setControlPosition(options.controlPosition);
      l.setControls(options.controls);
      l.setDrawingMode(options.drawingMode);
      l.setStyle(options.style);
    });
  };
  /**
   * Creates a Google Maps event listener for the given DataLayer as an Observable
   */


  DataLayerManager.prototype.createEventObservable = function (eventName, layer) {
    var _this = this;

    return new _rxjs.Observable(function (observer) {
      _this._layers.get(layer).then(function (d) {
        d.addListener(eventName, function (e) {
          return _this._zone.run(function () {
            return observer.next(e);
          });
        });
      });
    });
  };
  /**
   * Extract features from a geoJson using google.maps Data Class
   * @param d : google.maps.Data class instance
   * @param geoJson : url or geojson object
   */


  DataLayerManager.prototype.getDataFeatures = function (d, geoJson) {
    return new Promise(function (resolve, reject) {
      if (_typeof(geoJson) === 'object') {
        try {
          var features = d.addGeoJson(geoJson);
          resolve(features);
        } catch (e) {
          reject(e);
        }
      } else if (typeof geoJson === 'string') {
        d.loadGeoJson(geoJson, null, resolve);
      } else {
        reject("Impossible to extract features from geoJson: wrong argument type");
      }
    });
  };

  DataLayerManager = __decorate([(0, _core.Injectable)(), __metadata("design:paramtypes", [_googleMapsApiWrapper.GoogleMapsAPIWrapper, _core.NgZone])], DataLayerManager);
  return DataLayerManager;
}();

exports.DataLayerManager = DataLayerManager;