"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InfoWindowManager = void 0;

var _rxjs = require("rxjs");

var _core = require("@angular/core");

var _googleMapsApiWrapper = require("../google-maps-api-wrapper");

var _markerManager2 = require("./marker-manager");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {
    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  }
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var InfoWindowManager =
/** @class */
function () {
  function InfoWindowManager(_mapsWrapper, _zone, _markerManager) {
    this._mapsWrapper = _mapsWrapper;
    this._zone = _zone;
    this._markerManager = _markerManager;
    this._infoWindows = new Map();
  }

  InfoWindowManager.prototype.deleteInfoWindow = function (infoWindow) {
    var _this = this;

    var iWindow = this._infoWindows.get(infoWindow);

    if (iWindow == null) {
      // info window already deleted
      return Promise.resolve();
    }

    return iWindow.then(function (i) {
      return _this._zone.run(function () {
        i.close();

        _this._infoWindows.delete(infoWindow);
      });
    });
  };

  InfoWindowManager.prototype.setPosition = function (infoWindow) {
    return this._infoWindows.get(infoWindow).then(function (i) {
      return i.setPosition({
        lat: infoWindow.latitude,
        lng: infoWindow.longitude
      });
    });
  };

  InfoWindowManager.prototype.setZIndex = function (infoWindow) {
    return this._infoWindows.get(infoWindow).then(function (i) {
      return i.setZIndex(infoWindow.zIndex);
    });
  };

  InfoWindowManager.prototype.open = function (infoWindow) {
    var _this = this;

    return this._infoWindows.get(infoWindow).then(function (w) {
      if (infoWindow.hostMarker != null) {
        return _this._markerManager.getNativeMarker(infoWindow.hostMarker).then(function (marker) {
          return _this._mapsWrapper.getNativeMap().then(function (map) {
            return w.open(map, marker);
          });
        });
      }

      return _this._mapsWrapper.getNativeMap().then(function (map) {
        return w.open(map);
      });
    });
  };

  InfoWindowManager.prototype.close = function (infoWindow) {
    return this._infoWindows.get(infoWindow).then(function (w) {
      return w.close();
    });
  };

  InfoWindowManager.prototype.setOptions = function (infoWindow, options) {
    return this._infoWindows.get(infoWindow).then(function (i) {
      return i.setOptions(options);
    });
  };

  InfoWindowManager.prototype.addInfoWindow = function (infoWindow) {
    var options = {
      content: infoWindow.content,
      maxWidth: infoWindow.maxWidth,
      zIndex: infoWindow.zIndex,
      disableAutoPan: infoWindow.disableAutoPan
    };

    if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {
      options.position = {
        lat: infoWindow.latitude,
        lng: infoWindow.longitude
      };
    }

    var infoWindowPromise = this._mapsWrapper.createInfoWindow(options);

    this._infoWindows.set(infoWindow, infoWindowPromise);
  };
  /**
   * Creates a Google Maps event listener for the given InfoWindow as an Observable
   */


  InfoWindowManager.prototype.createEventObservable = function (eventName, infoWindow) {
    var _this = this;

    return new _rxjs.Observable(function (observer) {
      _this._infoWindows.get(infoWindow).then(function (i) {
        i.addListener(eventName, function (e) {
          return _this._zone.run(function () {
            return observer.next(e);
          });
        });
      });
    });
  };

  InfoWindowManager = __decorate([(0, _core.Injectable)(), __metadata("design:paramtypes", [_googleMapsApiWrapper.GoogleMapsAPIWrapper, _core.NgZone, _markerManager2.MarkerManager])], InfoWindowManager);
  return InfoWindowManager;
}();

exports.InfoWindowManager = InfoWindowManager;