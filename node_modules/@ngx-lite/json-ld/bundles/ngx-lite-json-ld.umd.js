(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngx-lite/json-ld', ['exports', '@angular/core', '@angular/platform-browser', '@angular/common'], factory) :
    (global = global || self, factory((global['ngx-lite'] = global['ngx-lite'] || {}, global['ngx-lite']['json-ld'] = {}), global.ng.core, global.ng.platformBrowser, global.ng.common));
}(this, function (exports, core, platformBrowser, common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxJsonLdComponent = /** @class */ (function () {
        function NgxJsonLdComponent(sanitizer) {
            this.sanitizer = sanitizer;
        }
        Object.defineProperty(NgxJsonLdComponent.prototype, "json", {
            set: /**
             * @param {?} currentValue
             * @return {?}
             */
            function (currentValue) {
                this.jsonLD = this.getSafeHTML(currentValue);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} value
         * @return {?}
         */
        NgxJsonLdComponent.prototype.getSafeHTML = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var json = value
                ? JSON.stringify(value, null, 2).replace(/<\/script>/g, '<\\/script>')
                : '';
            /** @type {?} */
            var html = "<script type=\"application/ld+json\">" + json + "</script>";
            return this.sanitizer.bypassSecurityTrustHtml(html);
        };
        NgxJsonLdComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-json-ld',
                        template: '',
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        NgxJsonLdComponent.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer }
        ]; };
        NgxJsonLdComponent.propDecorators = {
            json: [{ type: core.Input }],
            jsonLD: [{ type: core.HostBinding, args: ['innerHTML',] }]
        };
        return NgxJsonLdComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxJsonLdModule = /** @class */ (function () {
        function NgxJsonLdModule() {
        }
        NgxJsonLdModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [NgxJsonLdComponent],
                        exports: [NgxJsonLdComponent]
                    },] }
        ];
        return NgxJsonLdModule;
    }());

    exports.NgxJsonLdComponent = NgxJsonLdComponent;
    exports.NgxJsonLdModule = NgxJsonLdModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-lite-json-ld.umd.js.map
